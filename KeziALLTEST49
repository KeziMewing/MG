-- Anti-AFK Script
local vu = game:GetService("VirtualUser")
game:GetService("Players").LocalPlayer.Idled:Connect(function()
    vu:CaptureController()
    vu:ClickButton2(Vector2.new())
end)

-- Rayfield Library Load
local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

-- Function to show the notification every 90 seconds
local function notifyLoop()
    while true do
        Rayfield:Notify({
            Title = "Is there any bugs?",
            Content = "Consider reporting any bugs in KeziHub Discord Server",
            Duration = 6.5,  -- Duration of the notification
            Image = 4483362458,  -- Icon ID for the notification
        })
        
        wait(90)  -- Wait 90 seconds before showing the notification again
    end
end

-- Run the notification loop asynchronously
spawn(notifyLoop)

-- UI Setup
local Window = Rayfield:CreateWindow({
    Name = "KeziHub V1.0",
    LoadingTitle = "Kezi Specialist HUB",
    LoadingSubtitle = "by KezTeam",
    Theme = 'Default',
    ConfigurationSaving = {
        Enabled = true,
        FolderName = "KezHub",
        FileName = "KeziHubSettings"
    }
})

-- SCRIPTS HERE

-- Tab for Information
local InfoTab = Window:CreateTab("Information", 4483362458) -- Title and icon

-- Create Labels to show the stats in the UI
local elapsedTimeLabel = InfoTab:CreateLabel("Elapsed Time: 0 seconds")
local autoFarmTimeLabel = InfoTab:CreateLabel("AutoFarm Time: 0 seconds")
local pointsLabel = InfoTab:CreateLabel("Points Collected: 0")

-- Function to update elapsed time
local function getElapsedTime()
    return math.floor(tick() - startTime) -- Time in seconds since script started
end

-- Function to update auto-farm time
local function getAutoFarmTime()
    if isMiniGameWinActive or isMiniGameLoseActive then
        return math.floor(tick() - autoFarmStartTime) -- Time in seconds while auto-farming
    else
        return 0 -- If neither account toggle is active
    end
end

-- Function to update points collected
local function getPointsCollected()
    return pointsCollected -- Return the total points collected so far
end

-- Update the labels every frame
game:GetService("RunService").Heartbeat:Connect(function()
    elapsedTimeLabel.Text = "Elapsed Time: " .. getElapsedTime() .. " seconds"
    autoFarmTimeLabel.Text = "AutoFarm Time: " .. getAutoFarmTime() .. " seconds"
    pointsLabel.Text = "Points Collected: " .. getPointsCollected()
end)

-- Tab for Minigames
local MinigamesTab = Window:CreateTab("Minigames", 4483362458) -- Title and icon

-- Global flags for minigame states
local isMiniGameWinActive = false
local isMiniGameLoseActive = false
local pointsCollected = 0
local winAccountLoops = 0
local loseAccountLoops = 0
local autoFarmStartTime = 0 -- Time when the auto-farm starts
local pendingLoopTime = 1.5 -- Default value for pending loop time

-- Function to update elapsed time
local function getAutoFarmTime()
    if isMiniGameWinActive or isMiniGameLoseActive then
        return math.floor(tick() - autoFarmStartTime) -- Time in seconds while auto-farming
    else
        return 0 -- If neither account toggle is active
    end
end

-- Function to increment points collected
local function incrementPoints(accountType)
    if accountType == "win" then
        winAccountLoops = winAccountLoops + 1
        pointsCollected = pointsCollected + 10  -- Example: Each loop adds 10 points
    elseif accountType == "lose" then
        loseAccountLoops = loseAccountLoops + 1
        pointsCollected = pointsCollected + 5  -- Example: Each loop adds 5 points
    end
end

-- Win Account Toggle
MinigamesTab:CreateToggle({
    Name = "Win Account",
    CurrentValue = false,
    Flag = "WinAccount",
    Callback = function(Value)
        local player = game.Players.LocalPlayer

        -- Function to enter the minigame
        local function enterMinigame(vehicle)
            local args = {
                [1] = "Enter",
                [2] = vehicle
            }
            game:GetService("ReplicatedStorage"):WaitForChild("NetworkContainer"):WaitForChild("RemoteEvents"):WaitForChild("Minigames"):FireServer(unpack(args))
        end

        -- Function to leave the minigame
        local function leaveMinigame(vehicle)
            local args = {
                [1] = "Leave",
                [2] = vehicle
            }
            game:GetService("ReplicatedStorage"):WaitForChild("NetworkContainer"):WaitForChild("RemoteEvents"):WaitForChild("Minigames"):FireServer(unpack(args))
        end

        if Value then
            isMiniGameWinActive = true
            autoFarmStartTime = tick() -- Start the auto-farm time when the toggle is activated
            enterMinigame("2020Hiace")

            -- Detect when the character resets
            player.CharacterAdded:Connect(function()
                wait(pendingLoopTime)
                if isMiniGameWinActive then
                    enterMinigame("2020Hiace")
                    incrementPoints("win") -- Increment points on each loop
                end
            end)
        else
            -- Reset Character and leave the minigame
            if player.Character and player.Character:FindFirstChildOfClass("Humanoid") then
                player.Character:FindFirstChildOfClass("Humanoid").Health = 0 -- Reset the character
            end
            isMiniGameWinActive = false
            leaveMinigame("2020Hiace")
        end
    end
})

-- Lose Account Toggle
MinigamesTab:CreateToggle({
    Name = "Lose Account",
    CurrentValue = false,
    Flag = "LoseAccount",
    Callback = function(Value)
        local player = game.Players.LocalPlayer

        -- Function to enter the minigame
        local function enterMinigame(vehicle)
            local args = {
                [1] = "Enter",
                [2] = vehicle
            }
            game:GetService("ReplicatedStorage"):WaitForChild("NetworkContainer"):WaitForChild("RemoteEvents"):WaitForChild("Minigames"):FireServer(unpack(args))
            local humanoid = player.Character:WaitForChild("Humanoid")

            -- Start jumping coroutine
            coroutine.wrap(function()
                while isMiniGameLoseActive do
                    humanoid.Jump = true
                    wait(1)
                end
            end)()
        end

        -- Function to leave the minigame
        local function leaveMinigame(vehicle)
            local args = {
                [1] = "Leave",
                [2] = vehicle
            }
            game:GetService("ReplicatedStorage"):WaitForChild("NetworkContainer"):WaitForChild("RemoteEvents"):WaitForChild("Minigames"):FireServer(unpack(args))
        end

        if Value then
            isMiniGameLoseActive = true
            autoFarmStartTime = tick() -- Start the auto-farm time when the toggle is activated
            enterMinigame("2021Avanza15CVT")

            -- Detect when the character resets
            player.CharacterAdded:Connect(function()
                wait(pendingLoopTime)
                if isMiniGameLoseActive then
                    enterMinigame("2021Avanza15CVT")
                    incrementPoints("lose") -- Increment points on each loop
                end
            end)
        else
            -- Reset Character and leave the minigame
            if player.Character and player.Character:FindFirstChildOfClass("Humanoid") then
                player.Character:FindFirstChildOfClass("Humanoid").Health = 0 -- Reset the character
            end
            isMiniGameLoseActive = false
            leaveMinigame("2021Avanza15CVT")
        end
    end
})

-- Ensure UI persists on character reset
local ScreenGui = Window:GetGui()
ScreenGui.ResetOnSpawn = false
