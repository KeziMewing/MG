-- Anti-AFK
local vu = game:GetService("VirtualUser")
game:GetService("Players").LocalPlayer.Idled:Connect(function()
    vu:CaptureController()
    vu:ClickButton2(Vector2.new())
end)

-- Rayfield Library
local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

-- UI Setup
local Window = Rayfield:CreateWindow({
    Name = "KeziHub V1.0",
    LoadingTitle = "Kezi Specialist HUB",
    LoadingSubtitle = "by KezTeam",
    Theme = "AmberGlow",
    ConfigurationSaving = {
        Enabled = false,
        FolderName = "KezHub",
        FileName = "KeziHubSettings"
    }
})

-- Tab for Auto Farm
local AutofarmTab = Window:CreateTab("Auto Farm", 4483362458) -- Title and icon

local selectedJob = "Truck" -- Default selected job
local teleportTime = "" -- Initialize teleport time variable

-- Dropdown for job selection
local Dropdown = AutofarmTab:CreateDropdown({
    Name = "Select Job",
    Options = {"Truck"}, -- Add more options if needed
    CurrentOption = {"Truck"},
    MultipleOptions = false,
    Flag = "Dropdown1",
    Callback = function(Options)
        selectedJob = Options[1] -- Update selected job based on dropdown selection
    end,
})

-- Input for teleport time
local Input = AutofarmTab:CreateInput({
    Name = "Teleport Time",
    CurrentValue = teleportTime,
    PlaceholderText = "Teleport Time (in seconds)",
    RemoveTextAfterFocusLost = false,
    Flag = "Input1",
    Callback = function(Text)
        teleportTime = Text -- Update teleport time based on input
    end,
})

-- Create Truck AutoFarm Function
local function StartAutoFarmTruck()
    coroutine.wrap(function()
        local player = game.Players.LocalPlayer
        
        -- Fire server event to start the job
        local args = { [1] = "Truck" }
        game:GetService("ReplicatedStorage"):WaitForChild("NetworkContainer"):WaitForChild("RemoteEvents"):WaitForChild("Job"):FireServer(unpack(args))

        -- Function to fly the player to the specified waypoint
        local function flyToWaypoint(duration)
            local character = player.Character or player.CharacterAdded:Wait() -- Wait for the player's character to be available

            if character then
                local humanoidRootPart = character:FindFirstChild("HumanoidRootPart") -- Find the HumanoidRootPart

                if humanoidRootPart then
                    -- Wait for the Waypoint in the workspace
                    local waypointfolder = workspace:WaitForChild("Etc"):WaitForChild("Waypoint")
                    local waypoint = waypointfolder:WaitForChild("Waypoint")

                    -- Ensure the waypoint exists
                    if waypoint then
                        local startCFrame = humanoidRootPart.CFrame -- Get the starting CFrame
                        local endCFrame = waypoint.CFrame -- Get the CFrame of the waypoint
                        local startTime = tick() -- Record the starting time

                        -- Loop until the duration has passed
                        while tick() - startTime < duration do
                            local elapsedTime = tick() - startTime
                            local alpha = elapsedTime / duration -- Calculate the proportion of time passed

                            -- Interpolate the CFrame smoothly
                            humanoidRootPart.CFrame = startCFrame:Lerp(endCFrame, alpha)

                            wait(0.03) -- Wait for a short time to create a smooth movement
                        end

                        -- Ensure the HumanoidRootPart ends exactly at the target CFrame
                        humanoidRootPart.CFrame = endCFrame
                        print("Arrived at waypoint:", waypoint.Position) -- Log the arrival
                    else
                        warn("Waypoint not found in workspace.")
                    end
                else
                    warn("HumanoidRootPart not found for player.")
                end
            else
                warn("Character not found.")
            end
        end

        -- Example function call to fly to the waypoint
        local function startFlyingToWaypoint()
            local flyDuration = 15 -- Duration in seconds (you can adjust this)
            flyToWaypoint(flyDuration) -- Call the flyToWaypoint function with the duration
        end

        -- Call the function to start flying to the waypoint
        startFlyingToWaypoint()

        -- Get the Job module
        local jobModule = require(game:GetService("ReplicatedStorage").Modules.Job) -- Get the Job module
        local destinationCFrame = workspace.Etc.Job.Truck.Destination["5"].CFrame -- Custom destination CFrame

        -- Set the destination using the Job module
        jobModule:SetDestination(destinationCFrame)

        -- Fire the prompt for starting the job
        local startPrompt = workspace.Etc.Job.Truck.Starter.Prompt
        if startPrompt and startPrompt:IsA("ProximityPrompt") then
            fireproximityprompt(startPrompt) -- Fire the prompt to start the job
            wait(2) -- Wait for the prompt to process
        else
            warn("Prompt for starting job not found or invalid.")
            return
        end

        -- Wait for a moment to ensure the job has been set
        wait(2)

        -- Spawn Truck (Proximity Prompt)
        local truckJobPath = workspace.Etc.Job.Truck
        local part = truckJobPath:GetChildren()[5]
        local spawnPrompt = part:WaitForChild("Part"):WaitForChild("Prompt")

        if spawnPrompt and spawnPrompt:IsA("ProximityPrompt") then
            fireproximityprompt(spawnPrompt)
            wait(10) -- Wait for the truck to spawn
        else
            warn("ProximityPrompt for spawning truck not found or invalid.")
            return
        end

        -- Drive Truck (Proximity Prompt)
        local vehicle = workspace.Vehicles:FindFirstChild(player.Name .. "sCar")
        if vehicle then
            local driveSeat = vehicle:FindFirstChild("DriveSeat")
            if driveSeat then
                local getInPrompt = driveSeat:WaitForChild("PromptDriveSeat")
                if getInPrompt and getInPrompt:IsA("ProximityPrompt") then
                    fireproximityprompt(getInPrompt)
                    wait(10) -- Wait for the player to get in the truck
                else
                    warn("ProximityPrompt for driving truck not found or invalid.")
                    return
                end
            else
                warn("DriveSeat not found in vehicle.")
                return
            end
        else
            warn("Vehicle not found.")
            return
        end

        -- Fly to custom job destination
        if vehicle then
            local chassis = vehicle:FindFirstChild("A-Chassis Tune")
            if chassis then
                chassis:SetPrimaryPartCFrame(destinationCFrame) -- Move the chassis to the custom destination
                print("Vehicle has been moved to the custom job destination:", destinationCFrame.Position)
            else
                warn("Chassis not found in the vehicle.")
            end
        else
            warn("Vehicle not found.")
        end
    end)() -- Invoke the coroutine immediately
end

-- Toggle for starting auto farm
local Toggle = AutofarmTab:CreateToggle({
    Name = "Start AutoFarm",
    CurrentValue = false,
    Flag = "Toggle1",
    Callback = function(Value)
        if Value then
            -- Validate teleport time input
            local teleportTimeValue = tonumber(teleportTime)
            if teleportTimeValue and teleportTimeValue > 0 then
                -- Proceed with starting the AutoFarm
                print("Starting AutoFarm for job: " .. selectedJob .. " with teleport time: " .. teleportTimeValue .. " seconds.")

                -- Start the AutoFarm for the selected job
                if selectedJob == "Truck" then
                    StartAutoFarmTruck() -- Call the AutoFarm function for the Truck job
                else
                    print("No valid job selected.")
                end
            else
                -- Inform the user about the invalid input
                print("Please enter a valid teleport time greater than 0.")
                Toggle:SetValue(false) -- Turn off the toggle if the input is invalid
            end
        else
            print("AutoFarm stopped.")
            -- Reset Character
            local player = game.Players.LocalPlayer
            
            if player.Character and player.Character:FindFirstChildOfClass("Humanoid") then
                player.Character:FindFirstChildOfClass("Humanoid").Health = 0 -- Set health to 0 to reset the character
            end
        end
    end
})

-- Tab for Minigames
local MinigamesTab = Window:CreateTab("Minigames", 4483362458) -- Title and icon

-- Button to Buy Hiace
MinigamesTab:CreateButton({
    Name = "Buy Car",
    Callback = function()
        local args = {
            [1] = "Buy",
            [2] = "2020Hiace",
            [3] = "White",
            [4] = "Toyota"
        }
        game:GetService("ReplicatedStorage"):WaitForChild("NetworkContainer"):WaitForChild("RemoteFunctions"):WaitForChild("Dealership"):InvokeServer(unpack(args))
    end,
})

-- Adding Win Account Toggle
local isMiniGameWinActive = false -- Flag to track if the mini-game win state is active

MinigamesTab:CreateToggle({
    Name = "Win Account",
    CurrentValue = false,
    Flag = "WinAccount", -- Unique identifier
    Callback = function(Value)
        local player = game.Players.LocalPlayer

        -- Function to enter the minigame
        local function enterMinigame()
            local args = {
                [1] = "Enter",
                [2] = "2020Hiace" -- Replace with correct vehicle name for "Win Account"
            }
            game:GetService("ReplicatedStorage"):WaitForChild("NetworkContainer"):WaitForChild("RemoteEvents"):WaitForChild("Minigames"):FireServer(unpack(args))
        end

        local function leaveMinigame()
            local args = {
                [1] = "Leave",
                [2] = "2020Hiace"
            }
            
            game:GetService("ReplicatedStorage"):WaitForChild("NetworkContainer"):WaitForChild("RemoteEvents"):WaitForChild("Minigames"):FireServer(unpack(args))
        end

        if Value then
            -- Set the mini-game win active flag to true
            isMiniGameWinActive = true

            -- Enter Minigames when toggled on
            enterMinigame()

            -- Detect when the character resets
            player.CharacterAdded:Connect(function()
                wait(1.5) -- Wait for the new character to load properly
                if isMiniGameWinActive then -- Only call if mini-game win is still active
                    enterMinigame() -- Re-run the minigame entry
                end
            end)
        else
            -- Reset Character
            local player = game.Players.LocalPlayer

            if player.Character and player.Character:FindFirstChildOfClass("Humanoid") then
                player.Character:FindFirstChildOfClass("Humanoid").Health = 0 -- Set health to 0 to reset the character
            end
            
            -- Set the mini-game win active flag to false
            isMiniGameWinActive = false

            leaveMinigame()
        end
    end
})
 
-- Adding Lose Account Toggle
local isMiniGameLoseActive = false -- Flag to track if the mini-game lose state is active

local Toggle = MinigamesTab:CreateToggle({
    Name = "Lose Account",
    CurrentValue = false,
    Flag = "LoseAccount",
    Callback = function(Value)
        local player = game.Players.LocalPlayer -- Get the local player
    
        -- Function to enter the minigame
        local function enterMinigame()
            local args = {
                [1] = "Enter",
                [2] = "2021Avanza15CVT" -- Replace with the correct vehicle name for "Win Account"
            }
            game:GetService("ReplicatedStorage"):WaitForChild("NetworkContainer"):WaitForChild("RemoteEvents"):WaitForChild("Minigames"):FireServer(unpack(args))
    
            local humanoid = player.Character:WaitForChild("Humanoid")
    
            -- Start jumping coroutine
            coroutine.wrap(function()
                while isMiniGameLoseActive do -- Check if mini-game lose is still active
                    humanoid.Jump = true
                    wait(1) -- Adjust delay as needed
                end
            end)()
        end

        local function leaveMinigame()
            local args = {
                [1] = "Leave",
                [2] = "2020Hiace"
            }
            
            game:GetService("ReplicatedStorage"):WaitForChild("NetworkContainer"):WaitForChild("RemoteEvents"):WaitForChild("Minigames"):FireServer(unpack(args))
        end
    
        if Value then
            -- Set the mini-game lose active flag to true
            isMiniGameLoseActive = true
    
            -- Check if the character exists and call enterMinigame
            if player.Character then
                enterMinigame()
            end
    
            -- Detect when the character resets
            player.CharacterAdded:Connect(function()
                wait(1.5) -- Wait for the new character to load properly
                if isMiniGameLoseActive then -- Only call if mini-game lose is still active
                    enterMinigame() -- Re-run the mini-game entry
                end
            end)
    
            -- If the character is already present, call enterMinigame
            enterMinigame()
        else
            -- Reset Character
            if player.Character and player.Character:FindFirstChildOfClass("Humanoid") then
                player.Character:FindFirstChildOfClass("Humanoid").Health = 0 -- Set health to 0 to reset the character
            end
    
            -- Set the mini-game lose active flag to false
            isMiniGameLoseActive = false

            leaveMinigame()
        end
    end
})

-- Tab for Settings
local SettingsTab = Window:CreateTab("Settings", 4483362458) -- Title, Image

local Dropdown = SettingsTab:CreateDropdown({
    Name = "Theme Selector",
    Options = {"Default", "AmberGlow", "Amethyst", "Bloom", "DarkBlue", "Green", "Light", "Ocean", "Serenity"},
    CurrentOption = {"Default"},
    MultipleOptions = false,
    Flag = "Dropdown1", -- A flag is the identifier for the configuration file
    Callback = function(Options)
        -- Directly use the selected option to modify the theme
        Window:ModifyTheme(Options[1]) -- Change the theme immediately based on the selected option
    end,
})

-- Persisting UI on Character Reset
local ScreenGui = Window:GetGui()
ScreenGui.ResetOnSpawn = false
