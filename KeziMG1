-- Anti-AFK
local vu = game:GetService("VirtualUser")
game:GetService("Players").LocalPlayer.Idled:Connect(function()
    vu:CaptureController()
    vu:ClickButton2(Vector2.new())
end)

-- Rayfield Library
local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

-- UI Setup
local Window = Rayfield:CreateWindow({
    Name = "KeziHub V1.0",
    LoadingTitle = "Kezi Specialist HUB",
    LoadingSubtitle = "by KezTeam",
    Theme = "AmberGlow",
    ConfigurationSaving = {
        Enabled = false,
        FolderName = "KezHub",
        FileName = "KeziHubSettings"
    }
})

-- Tab for Auto Farm
local AutofarmTab = Window:CreateTab("Auto Farm", 4483362458) -- Title and icon

local selectedJob = "Truck" -- Default selected job
local teleportTime = "" -- Initialize teleport time variable

-- Dropdown for job selection
local Dropdown = AutofarmTab:CreateDropdown({
    Name = "Select Job",
    Options = {"Truck"}, -- Added more options if needed
    CurrentOption = {"Truck"},
    MultipleOptions = false,
    Flag = "Dropdown1",
    Callback = function(Options)
        selectedJob = Options[1] -- Update selected job based on dropdown selection
    end,
})

-- Input for teleport time
local Input = AutofarmTab:CreateInput({
    Name = "Teleport Time",
    CurrentValue = teleportTime,
    PlaceholderText = "Teleport Time (in seconds)",
    RemoveTextAfterFocusLost = false,
    Flag = "Input1",
    Callback = function(Text)
        teleportTime = Text -- Update teleport time based on input
    end,
})

-- Toggle for starting auto farm
local Toggle = AutofarmTab:CreateToggle({
    Name = "Start AutoFarm",
    CurrentValue = false,
    Flag = "Toggle1",
    Callback = function(Value)
        if Value then
            -- Validate teleport time input
            local teleportTimeValue = tonumber(teleportTime)
            if teleportTimeValue and teleportTimeValue > 0 then
                -- Proceed with starting the AutoFarm
                print("Starting AutoFarm for job: " .. selectedJob .. " with teleport time: " .. teleportTimeValue .. " seconds.")
                -- AutoFarm logic here
                if selectedJob = Truck
            else
                -- Inform the user about the invalid input
                print("Please enter a valid teleport time greater than 50.")
                Toggle:SetValue(false) -- Turn off the toggle if the input is invalid
            end
        else
            print("AutoFarm stopped.")
            -- kill the character
            if player.Character then
                player.character:BreakJoints()
            end
        end
    end
})



-- Tab for Minigames
local MinigamesTab = Window:CreateTab("Minigames", 4483362458) -- Title and icon

-- Button to Buy Hiace
MinigamesTab:CreateButton({
    Name = "Buy Car",
    Callback = function()
        local args = {
            [1] = "Buy",
            [2] = "2020Hiace",
            [3] = "White",
            [4] = "Toyota"
        }
        game:GetService("ReplicatedStorage"):WaitForChild("NetworkContainer"):WaitForChild("RemoteFunctions"):WaitForChild("Dealership"):InvokeServer(unpack(args))
    end,
})

-- Adding Win Account Toggle
MinigamesTab:CreateToggle({
    Name = "Win Account",
    CurrentValue = false,
    Flag = "WinAccount", -- Unique identifier
    Callback = function(Value)
        local player = game.Players.LocalPlayer

        -- Function to enter the minigame
        local function enterMinigame()
            local args = {
                [1] = "Enter",
                [2] = "2020Hiace" -- Replace with correct vehicle name for "Win Account"
            }
            game:GetService("ReplicatedStorage"):WaitForChild("NetworkContainer"):WaitForChild("RemoteEvents"):WaitForChild("Minigames"):FireServer(unpack(args))
        end

        if Value then
            -- Enter Minigames when toggled on
            enterMinigame()

            -- Detect when the character resets
            player.CharacterAdded:Connect(function()
                wait(1) -- Wait for the new character to load properly
                enterMinigame() -- Re-run the minigame entry
            end)
        else
            -- Kill The Character
            if player.Character then
                player.character:BreakJoints()
            end
        end
    end
})

 
-- Adding Lose Account Toggle
MinigamesTab:CreateToggle({
    Name = "Lose Account",
    CurrentValue = false,
    Flag = "LoseAccount", -- Unique identifier
    Callback = function(Value)
        local player = game.Players.LocalPlayer

        -- Function to handle jumping and entering the minigame
        local function enterMinigame()
            local humanoid = player.Character:WaitForChild("Humanoid")
            
            -- Start Jumping Loop in a separate coroutine
            coroutine.wrap(function()
                while Value do
                    humanoid.Jump = true
                    wait(0.5) -- Adjust delay as needed
                end
            end)()

            -- Enter Minigames
            local args = {
                [1] = "Enter",
                [2] = "2021Avanza15CVT" -- Replace with correct vehicle name for "Lose Account"
            }
            game:GetService("ReplicatedStorage"):WaitForChild("NetworkContainer"):WaitForChild("RemoteEvents"):WaitForChild("Minigames"):FireServer(unpack(args))
        end

        if Value then
            -- Check if the character exists and call enterMinigame
            if player.Character then
                enterMinigame()
            end

            -- Detect when the character resets
            player.CharacterAdded:Connect(function()
                wait(1) -- Wait for the new character to load properly
                enterMinigame() -- Re-run the minigame entry
            end)

            -- If the character is already present, call enterMinigame
            enterMinigame()
        else
            -- Kill The Character
            if player.Character then
                player.character:BreakJoints()
            end
        end
    end
})

-- Persisting UI on Character Reset
local ScreenGui = Window:GetGui()
ScreenGui.ResetOnSpawn = false
