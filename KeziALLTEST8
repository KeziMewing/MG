-- Anti-AFK
local vu = game:GetService("VirtualUser")
game:GetService("Players").LocalPlayer.Idled:Connect(function()
    vu:CaptureController()
    vu:ClickButton2(Vector2.new())
end)

-- Rayfield Library
local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

-- UI Setup
local Window = Rayfield:CreateWindow({
    Name = "KeziHub V1.0",
    LoadingTitle = "Kezi Specialist HUB",
    LoadingSubtitle = "by KezTeam",
    Theme = "AmberGlow",
    ConfigurationSaving = {
        Enabled = false,
        FolderName = "KezHub",
        FileName = "KeziHubSettings"
    }
})

-- Tab for Auto Farm
local AutofarmTab = Window:CreateTab("Auto Farm", 4483362458) -- Title and icon

local selectedJob = "Truck" -- Default selected job
local teleportTime = "" -- Initialize teleport time variable

-- Dropdown for job selection
local Dropdown = AutofarmTab:CreateDropdown({
    Name = "Select Job",
    Options = {"Truck"}, -- Added more options if needed
    CurrentOption = {"Truck"},
    MultipleOptions = false,
    Flag = "Dropdown1",
    Callback = function(Options)
        selectedJob = Options[1] -- Update selected job based on dropdown selection
    end,
})

-- Input for teleport time
local Input = AutofarmTab:CreateInput({
    Name = "Teleport Time",
    CurrentValue = teleportTime,
    PlaceholderText = "Teleport Time (in seconds)",
    RemoveTextAfterFocusLost = false,
    Flag = "Input1",
    Callback = function(Text)
        teleportTime = Text -- Update teleport time based on input
    end,
})

-- Create Truck AutoFarm Function
local function StartAutoFarmTruck()
    coroutine.wrap(function()
        -- Select Job (Truck)
        local args = {
            [1] = "Truck"
        }
        game:GetService("ReplicatedStorage"):WaitForChild("NetworkContainer"):WaitForChild("RemoteEvents"):WaitForChild("Job"):FireServer(unpack(args))

        -- Wait for the job selection to complete
        wait(2) -- Adjust the wait time as needed

        -- Teleport to Cirebon
        local teleportArgs = {
            [1] = "Cirebon"  -- Changed to Cirebon
        }
        game:GetService("ReplicatedStorage"):WaitForChild("NetworkContainer"):WaitForChild("RemoteEvents"):WaitForChild("TransEvent"):FireServer(unpack(teleportArgs))

        -- Wait for teleportation to complete
        wait(2) -- Adjust the wait time as needed

        -- Fly to Coordinates Script
        local targetCFrame = CFrame.new(-21774.8652, 1042.03174, -26777.4453, -0.166060805, 0, -0.986115515, 0, 1, 0, 0.986115515, 0, -0.166060805)

        -- Duration for flying to the target coordinates (in seconds)
        local flyDuration = 15

        -- Function to fly the player to the specified coordinates
        local function flyToCoordinates(cframe, duration)
            local player = game.Players.LocalPlayer
            local character = player.Character or player.CharacterAdded:Wait() -- Wait for the character to be available

            if character then
                local humanoidRootPart = character:FindFirstChild("HumanoidRootPart") -- Find the HumanoidRootPart

                if humanoidRootPart then
                    local startCFrame = humanoidRootPart.CFrame
                    local endCFrame = cframe
                    local startTime = tick() -- Record the starting time

                    -- Loop until the duration has passed
                    while tick() - startTime < duration do
                        local elapsedTime = tick() - startTime
                        local alpha = elapsedTime / duration -- Calculate the proportion of time passed

                        -- Interpolate the CFrame smoothly
                        humanoidRootPart.CFrame = startCFrame:Lerp(endCFrame, alpha)

                        wait(0.03) -- Wait for a short time to create a smooth movement
                    end

                    -- Ensure the HumanoidRootPart ends exactly at the target CFrame
                    humanoidRootPart.CFrame = endCFrame
                    print("Arrived at coordinates:", cframe.Position) -- Log the arrival
                else
                    warn("HumanoidRootPart not found for player.")
                end
            else
                warn("Character not found.")
            end
        end

        -- Call the function to fly to the target coordinates
        flyToCoordinates(targetCFrame, flyDuration)


        -- Start Job (Proximity Prompt)
        local startPrompt = workspace.Etc.Job.Truck.Starter:WaitForChild("Prompt")  -- Ensure path is correct
        if startPrompt and startPrompt:IsA("ProximityPrompt") then
            fireproximityprompt(startPrompt)
            wait(10) -- Wait for the job to start
        else
            warn("ProximityPrompt for starting job not found or invalid.")
            return
        end

        -- Spawn Truck (Proximity Prompt)
        local spawnPrompt = workspace.Etc.Job.Truck:GetChildren()[5]:WaitForChild("Part"):WaitForChild("Prompt")  -- Ensure path is correct
        if spawnPrompt and spawnPrompt:IsA("ProximityPrompt") then
            fireproximityprompt(spawnPrompt)
            wait(10) -- Wait for the truck to spawn
        else
            warn("ProximityPrompt for spawning truck not found or invalid.")
            return
        end

        -- Drive Truck (Proximity Prompt)
        local getInPrompt = workspace.Vehicles.asdqwr2twgwdsCar.DriveSeat:WaitForChild("PromptDriveSeat")  -- Ensure path is correct
        if getInPrompt and getInPrompt:IsA("ProximityPrompt") then
            fireproximityprompt(getInPrompt)
            wait(10) -- Wait for the driving prompt to execute
        else
            warn("ProximityPrompt for driving truck not found or invalid.")
            return
        end

        -- Function to handle the GetInPrompt click
        local function onGetInPromptClicked()
            -- Define the order of destinations
            local destinations = {
                workspace.Etc.Job.Truck.Destination["5"].CFrame,
                workspace.Etc.Job.Truck.Destination["3"].CFrame,
                workspace.Etc.Job.Truck.Destination["2"].CFrame,
                workspace.Etc.Job.Truck.Destination["1"].CFrame,
                workspace.Etc.Job.Truck.Destination["4"].CFrame,
            }

            -- Function to fly the vehicle to a destination
            local function flyTo(destinationCFrame)
                local vehicle = game.Players.LocalPlayer.Character:FindFirstChild("YourVehicleName") -- Replace with the actual name of the vehicle model
                if vehicle and vehicle:FindFirstChild("HumanoidRootPart") then
                    vehicle:SetPrimaryPartCFrame(destinationCFrame)
                else
                    warn("Vehicle not found or does not have a HumanoidRootPart.")
                end
            end

            -- Fly to each destination in order
            for _, destinationCFrame in ipairs(destinations) do
                flyTo(destinationCFrame)
                
                -- Use the teleport time input for wait time
                local waitTime = tonumber(teleportTime) or 1 -- Default to 1 second if input is invalid
                wait(waitTime) -- Wait for the specified teleport time before moving to the next destination
            end
        end

        -- Connect the GetInPrompt click to the function
        if getInPrompt and getInPrompt:IsA("ProximityPrompt") then
            getInPrompt.Triggered:Connect(onGetInPromptClicked)
        else
            warn("GetInPrompt not found or invalid.")
        end

    end)() -- Invoke the coroutine immediately
end

-- Toggle for starting auto farm
local Toggle = AutofarmTab:CreateToggle({
    Name = "Start AutoFarm",
    CurrentValue = false,
    Flag = "Toggle1",
    Callback = function(Value)
        if Value then
            -- Validate teleport time input
            local teleportTimeValue = tonumber(teleportTime)
            if teleportTimeValue and teleportTimeValue > 0 then
                -- Proceed with starting the AutoFarm
                print("Starting AutoFarm for job: " .. selectedJob .. " with teleport time: " .. teleportTimeValue .. " seconds.")

                -- Start the AutoFarm for the selected job
                if selectedJob == "Truck" then
                    StartAutoFarmTruck() -- Call the AutoFarm function for the Truck job
                else
                    print("No valid job selected.")
                end
            else
                -- Inform the user about the invalid input
                print("Please enter a valid teleport time greater than 0.")
                Toggle:SetValue(false) -- Turn off the toggle if the input is invalid
            end
        else
            print("AutoFarm stopped.")
            -- Reset Character
            local player = game.Players.LocalPlayer
            
            if player.Character and player.Character:FindFirstChildOfClass("Humanoid") then
                player.Character:FindFirstChildOfClass("Humanoid").Health = 0 -- Set health to 0 to reset the character
            end
        end
    end
})


-- Tab for Minigames
local MinigamesTab = Window:CreateTab("Minigames (JAKARTA ONLY)", 4483362458) -- Title and icon

-- Button to Buy Hiace
MinigamesTab:CreateButton({
    Name = "Buy Car",
    Callback = function()
        local args = {
            [1] = "Buy",
            [2] = "2020Hiace",
            [3] = "White",
            [4] = "Toyota"
        }
        game:GetService("ReplicatedStorage"):WaitForChild("NetworkContainer"):WaitForChild("RemoteFunctions"):WaitForChild("Dealership"):InvokeServer(unpack(args))
    end,
})

-- Adding Win Account Toggle
local isMiniGameWinActive = false -- Flag to track if the mini-game win state is active

MinigamesTab:CreateToggle({
    Name = "Win Account",
    CurrentValue = false,
    Flag = "WinAccount", -- Unique identifier
    Callback = function(Value)
        local player = game.Players.LocalPlayer

        -- Function to enter the minigame
        local function enterMinigame()
            local args = {
                [1] = "Enter",
                [2] = "2020Hiace" -- Replace with correct vehicle name for "Win Account"
            }
            game:GetService("ReplicatedStorage"):WaitForChild("NetworkContainer"):WaitForChild("RemoteEvents"):WaitForChild("Minigames"):FireServer(unpack(args))
        end

        if Value then
            -- Set the mini-game win active flag to true
            isMiniGameWinActive = true

            -- Enter Minigames when toggled on
            enterMinigame()

            -- Detect when the character resets
            player.CharacterAdded:Connect(function()
                wait(1) -- Wait for the new character to load properly
                if isMiniGameWinActive then -- Only call if mini-game win is still active
                    enterMinigame() -- Re-run the minigame entry
                end
            end)
        else
            -- Reset Character
            local player = game.Players.LocalPlayer

            if player.Character and player.Character:FindFirstChildOfClass("Humanoid") then
                player.Character:FindFirstChildOfClass("Humanoid").Health = 0 -- Set health to 0 to reset the character
            end
            
            -- Set the mini-game win active flag to false
            isMiniGameWinActive = false
        end
    end
})
 
-- Adding Lose Account Toggle
local isMiniGameLoseActive = false -- Flag to track if the mini-game lose state is active

local Toggle = MinigamesTab:CreateToggle({
    Name = "Lose Account",
    CurrentValue = false,
    Flag = "LoseAccount",
    Callback = function(Value)
        local player = game.Players.LocalPlayer -- Get the local player
    
        -- Function to enter the minigame
        local function enterMinigame()
            local args = {
                [1] = "Enter",
                [2] = "2021Avanza15CVT" -- Replace with the correct vehicle name for "Win Account"
            }
            game:GetService("ReplicatedStorage"):WaitForChild("NetworkContainer"):WaitForChild("RemoteEvents"):WaitForChild("Minigames"):FireServer(unpack(args))
    
            local humanoid = player.Character:WaitForChild("Humanoid")
    
            -- Start jumping coroutine
            coroutine.wrap(function()
                while isMiniGameLoseActive do -- Check if mini-game lose is still active
                    humanoid.Jump = true
                    wait(0.5) -- Adjust delay as needed
                end
            end)()
        end
    
        if Value then
            -- Set the mini-game lose active flag to true
            isMiniGameLoseActive = true
    
            -- Check if the character exists and call enterMinigame
            if player.Character then
                enterMinigame()
            end
    
            -- Detect when the character resets
            player.CharacterAdded:Connect(function()
                wait(1) -- Wait for the new character to load properly
                if isMiniGameLoseActive then -- Only call if mini-game lose is still active
                    enterMinigame() -- Re-run the mini-game entry
                end
            end)
    
            -- If the character is already present, call enterMinigame
            enterMinigame()
        else
            -- Reset Character
            if player.Character and player.Character:FindFirstChildOfClass("Humanoid") then
                player.Character:FindFirstChildOfClass("Humanoid").Health = 0 -- Set health to 0 to reset the character
            end
    
            -- Set the mini-game lose active flag to false
            isMiniGameLoseActive = false
        end
    end
})

-- Tab for Settings
local SettingsTab = Window:CreateTab("Settings", 4483362458) -- Title and icon

-- Create an Input for the server code
local Input = SettingsTab:CreateInput({
    Name = "Input Server Code",
    CurrentValue = "", -- This holds the current input value
    PlaceholderText = "Input Server Code", -- Placeholder for the input field
    RemoveTextAfterFocusLost = false, -- Keep the text after losing focus
    Flag = "Input1", -- Unique flag for this input field
    Callback = function(Text)
        -- This callback updates the CurrentValue property when input changes
        Input.CurrentValue = Text -- Store the current input value
    end,
})

-- Create a button for joining the private server
local Button = SettingsTab:CreateButton({
    Name = "Join Private Server",
    Callback = function()
        -- Function to teleport to the place first
        local function TeleportToPlace(placeId)
            local TeleportService = game:GetService("TeleportService")
            TeleportService:Teleport(placeId, game.Players.LocalPlayer)  -- Teleporting the local player to the specified place
        end

        -- Function to join the private server using the input value
        local function JoinPrivateServer(serverCode)
            local args = {
                [1] = "Join",              -- Action to join
                [2] = serverCode,          -- Use the server code provided by the user
                [3] = "JawaTengah"         -- Additional identifier (e.g., game mode or other context)
            }
        
            -- Fire the server with the arguments
            game:GetService("ReplicatedStorage"):WaitForChild("NetworkContainer"):WaitForChild("RemoteEvents"):WaitForChild("PrivateServer"):FireServer(unpack(args))
        end

        -- Get the input value from the input field
        local serverCode = Input.CurrentValue -- Retrieve the current value from the input field

        -- Teleport to the specified place first
        TeleportToPlace(6911148748)  -- Teleporting to the specified Place ID

        -- After teleporting, you can join the private server
        if serverCode and serverCode ~= "" then
            JoinPrivateServer(serverCode)  -- Pass the server code to the function
        else
            print("Please enter a valid server code.")  -- Optional: handle empty input
        end
    end,
})

-- Persisting UI on Character Reset
local ScreenGui = Window:GetGui()
ScreenGui.ResetOnSpawn = false
