-- Anti-AFK Script
local vu = game:GetService("VirtualUser")
game:GetService("Players").LocalPlayer.Idled:Connect(function()
    vu:CaptureController()
    vu:ClickButton2(Vector2.new())
end)

-- Rayfield Library Load
local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

-- Function to show the notification every 90 seconds
local function notifyLoop()
    while true do
        Rayfield:Notify({
            Title = "Is there any bugs?",
            Content = "Consider reporting any bugs in KeziHub Discord Server",
            Duration = 6.5,  -- Duration of the notification
            Image = 4483362458,  -- Icon ID for the notification
        })
        
        wait(90)  -- Wait 90 seconds before showing the notification again
    end
end

-- Run the notification loop asynchronously
spawn(notifyLoop)

-- UI Setup
local Window = Rayfield:CreateWindow({
    Name = "KeziHub V1.0",
    LoadingTitle = "Kezi Specialist HUB",
    LoadingSubtitle = "by KezTeam",
    Theme = 'Default',
    ConfigurationSaving = {
        Enabled = false,
        FolderName = "KezHub",
        FileName = "KeziHubSettings"
    }
})

-- SCRIPTS HERE

-- Tab for Monitoring
local MonitoringTab = Window:CreateTab("Monitoring", 4483362458) -- Title and icon

-- Section for Monitoring Information
MonitoringTab:CreateSection("Minigame Monitoring")

-- Create Labels to show the stats in the UI
local elapsedTimeLabel = MonitoringTab:CreateLabel("Elapsed Time: 00:00:00")
local pointsCollectedLabel = MonitoringTab:CreateLabel("Points Collected: 0")

-- Variables to track elapsed time and points collected
local elapsedTime = 0
local pointsCollected = 0

-- Update the elapsed time and points collected every second
game:GetService("RunService").Heartbeat:Connect(function()
    if isMiniGameWinActive or isMiniGameLoseActive then
        elapsedTime = elapsedTime + game:GetService("RunService").Heartbeat:Wait() -- Increment elapsed time
        
        -- Calculate elapsed time in hh:mm:ss format
        local hours = math.floor(elapsedTime / 3600)
        local minutes = math.floor((elapsedTime % 3600) / 60)
        local seconds = math.floor(elapsedTime % 60)
        
        -- Format elapsed time
        local formattedTime = string.format("%02d:%02d:%02d", hours, minutes, seconds)
        elapsedTimeLabel.Text = "Elapsed Time: " .. formattedTime

        -- Update points collected based on current active state
        if isMiniGameWinActive then
            pointsCollected = pointsCollected + (game.Players.LocalPlayer.Character and 10 or 0) -- Add 10 points for Win Account
        elseif isMiniGameLoseActive then
            pointsCollected = pointsCollected + (game.Players.LocalPlayer.Character and 5 or 0) -- Add 5 points for Lose Account
        end
        
        pointsCollectedLabel.Text = "Points Collected: " .. pointsCollected
    end
end)

-- Function to handle character reset and update points
local function onCharacterReset()
    if isMiniGameWinActive then
        pointsCollected = pointsCollected + 10
    elseif isMiniGameLoseActive then
        pointsCollected = pointsCollected + 5
    end
    pointsCollectedLabel.Text = "Points Collected: " .. pointsCollected -- Update points display
end

-- Connect character reset event to update points
game.Players.LocalPlayer.CharacterAdded:Connect(onCharacterReset)

-- Tab for Auto Farm
local AutofarmTab = Window:CreateTab("Auto Farm", 4483362458) -- Title and icon

local selectedJob = "Truck" -- Default selected job
local teleportTime = "" -- Initialize teleport time variable
local teleportptshadTime = "" -- Initialize Teleport PT SHAD Time variable

-- Dropdown for job selection
local Dropdown = AutofarmTab:CreateDropdown({
    Name = "Select Job",
    Options = {"Truck"}, -- Add more options if needed
    CurrentOption = {"Truck"},
    MultipleOptions = false,
    Flag = "Dropdown1",
    Callback = function(Options)
        selectedJob = Options[1] -- Update selected job based on dropdown selection
    end,
})

-- Input for teleport time
local Input = AutofarmTab:CreateInput({
    Name = "Teleport Time",
    CurrentValue = teleportTime,
    PlaceholderText = "Teleport Time (in seconds)",
    RemoveTextAfterFocusLost = false,
    Flag = "Input1",
    Callback = function(Text)
        teleportTime = Text -- Update teleport time based on input
    end,
})

-- Input for teleport to pt shad time
local Input2 = AutofarmTab:CreateInput({
    Name = "Teleport To PT SHAD Time",
    CurrentValue = teleportptshadTime,
    PlaceholderText = "Teleport To PT SHAD Time (in seconds)",
    RemoveTextAfterFocusLost = false,
    Flag = "Input2",
    Callback = function(Text)
        teleportptshadTime = Text -- Update teleport pt shad time based on input
    end,
})

-- Create Truck AutoFarm Function
local function StartAutoFarmTruck()
    coroutine.wrap(function()
        local player = game.Players.LocalPlayer
        
        -- Fire server event to start the job
        local args = { [1] = selectedJob } -- Use selectedJob directly
        game:GetService("ReplicatedStorage"):WaitForChild("NetworkContainer"):WaitForChild("RemoteEvents"):WaitForChild("Job"):FireServer(unpack(args))

        -- Function to fly the player to the specified waypoint and hold for a duration
        local function flyToWaypoint(flyDuration, holdDuration)
            local character = player.Character or player.CharacterAdded:Wait()
            local humanoidRootPart = character:FindFirstChild("HumanoidRootPart")
            local waypoint = workspace:WaitForChild("Etc"):WaitForChild("Waypoint"):WaitForChild("Waypoint")

            if humanoidRootPart and waypoint then
                local startCFrame, endCFrame = humanoidRootPart.CFrame, waypoint.CFrame
                local startTime = tick()

                -- Fly to the waypoint
                while tick() - startTime < flyDuration do
                    humanoidRootPart.CFrame = startCFrame:Lerp(endCFrame, (tick() - startTime) / flyDuration)
                    wait(0.03)
                end
                
                humanoidRootPart.CFrame = endCFrame -- Ensure exact arrival
                wait(holdDuration) -- Hold at waypoint
            else
                warn("Character or waypoint not found.")
            end
        end

        -- Start flying to the waypoint
        local function startFlyingToWaypoint()
            local flyDuration = tonumber(teleportptshadTime) or 0 -- Duration in seconds
            if flyDuration > 0 then 
                flyToWaypoint(flyDuration, 5) -- Default hold duration is 5 seconds 
            end
        end

        startFlyingToWaypoint() -- Trigger fly to waypoint

        -- Start Job
        local promptPart = workspace.Etc.Job.Truck.Starter -- Path to the part with the Proximity Prompt
        local prompt = promptPart:WaitForChild("Prompt") -- Get the Proximity Prompt

        -- Function to trigger the Proximity Prompt
        local function triggerPrompt()
            if prompt and prompt:IsA("ProximityPrompt") then
                fireproximityprompt(prompt) -- Fire the Proximity Prompt
                wait(1) -- Wait a moment for the prompt to process
            else
                warn("Proximity Prompt not found or invalid.")
            end
        end

        triggerPrompt() -- Call the function to trigger the prompt

        -- Wait for a moment after triggering the prompt to ensure it processes
        wait(2) 

        -- Spawn Truck (Proximity Prompt)
        local spawnPrompt = workspace.Etc.Job.Truck:GetChildren()[5].Part.Prompt

        if spawnPrompt and spawnPrompt:IsA("ProximityPrompt") then
            while true do
                fireproximityprompt(spawnPrompt) -- Trigger the Proximity Prompt
                wait(2) -- Wait a bit before triggering again to avoid spam
                
                -- Check the player's truck's horsepower
                local vehicle = workspace.Vehicles:FindFirstChild(player.Name .. "'sCar") -- Assuming the naming convention is "{PlayerName}'sCar"
                if vehicle and vehicle.Customizeable and vehicle.Customizeable.Horsepower then
                    local horsepower = vehicle.Customizeable.Horsepower.Value -- Access the horsepower value
                    if horsepower >= 114 and horsepower <= 134 then
                        print("Desired horsepower reached:", horsepower)
                        break -- Exit the loop if the condition is met
                    end
                else
                    warn("Vehicle or horsepower not found.")
                end
            end
        else
            warn("ProximityPrompt for spawning truck not found or invalid.")
        end

        -- Drive Truck (Proximity Prompt)
        local vehicle = workspace.Vehicles:FindFirstChild(player.Name .. "'sCar")
        if vehicle then
            local driveSeat = vehicle:FindFirstChild("DriveSeat")
            if driveSeat then
                local getInPrompt = driveSeat:WaitForChild("PromptDriveSeat")
                if getInPrompt and getInPrompt:IsA("ProximityPrompt") then
                    fireproximityprompt(getInPrompt)
                    wait(10) -- Wait for the player to get in the truck
                else
                    warn("ProximityPrompt for driving truck not found or invalid.")
                    return
                end
            else
                warn("DriveSeat not found in vehicle.")
                return
            end
        else
            warn("Vehicle not found.")
            return
        end
    end)() -- Invoke the coroutine immediately
end

-- Toggle for starting auto farm
local Toggle = AutofarmTab:CreateToggle({
    Name = "Start AutoFarm",
    CurrentValue = false,
    Flag = "Toggle1",
    Callback = function(Value)
        if Value then
            -- Validate teleport time input
            local teleportTimeValue = tonumber(teleportTime)
            if teleportTimeValue and teleportTimeValue > 0 then
                -- Proceed with starting the AutoFarm
                print("Starting AutoFarm for job: " .. selectedJob .. " with teleport time: " .. teleportTimeValue .. " seconds.")

                -- Start the AutoFarm for the selected job
                if selectedJob == "Truck" then
                    StartAutoFarmTruck() -- Call the AutoFarm function for the Truck job
                else
                    return
                end
            else
                -- Inform the user about the invalid input
                Toggle:SetValue(false) -- Turn off the toggle if the input is invalid
                print("Invalid Teleport Time input. Please enter a valid number greater than 0.")
            end
        else
            -- Reset Character
            local player = game.Players.LocalPlayer
            
            if player.Character and player.Character:FindFirstChildOfClass("Humanoid") then
                player.Character:FindFirstChildOfClass("Humanoid").Health = 0 -- Set health to 0 to reset the character
            end

            local args = {[1] = "Unemployee"}
            game:GetService("ReplicatedStorage"):WaitForChild("NetworkContainer"):WaitForChild("RemoteEvents"):WaitForChild("Job"):FireServer(unpack(args))            
        end
    end
})


-- Tab for Minigames
local MinigamesTab = Window:CreateTab("Minigames", 4483362458) -- Title and icon

-- Information
MinigamesTab:CreateSection("Minigames Information")
MinigamesTab:CreateParagraph({Title = "Information", Content = "Required 6 Instances to use this feature. Make sure to use 1 Main Account and 5 Dummy Accounts."})

-- Minigame Car
MinigamesTab:CreateSection("Buy Car Section")

-- Button to Buy Avanza 1.5G
MinigamesTab:CreateButton({
    Name = "Buy Avanza (ONLY FOR LOSE ACCOUNT)",
    Callback = function()
        local args = {
            [1] = "Buy",
            [2] = "2021Avanza15CVT",
            [3] = "White",
            [4] = "Toyota"
        }
        game:GetService("ReplicatedStorage"):WaitForChild("NetworkContainer"):WaitForChild("RemoteFunctions"):WaitForChild("Dealership"):InvokeServer(unpack(args))
    end,
})

-- Button to Buy Hiace
MinigamesTab:CreateButton({
    Name = "Buy Hiace (ONLY FOR WIN ACCOUNT)",
    Callback = function()
        local args = {
            [1] = "Buy",
            [2] = "2020Hiace",
            [3] = "White",
            [4] = "Toyota"
        }
        game:GetService("ReplicatedStorage"):WaitForChild("NetworkContainer"):WaitForChild("RemoteFunctions"):WaitForChild("Dealership"):InvokeServer(unpack(args))
    end,
})

-- Minigames Config Section
MinigamesTab:CreateSection("Minigames Config")

-- Pending Loop Time
local pendingLoopTime = 1.5 -- Default value
local Input = MinigamesTab:CreateInput({
    Name = "Pending Loop Time",
    CurrentValue = tostring(pendingLoopTime), -- Default value as string for easy conversion
    PlaceholderText = "Input Placeholder",
    RemoveTextAfterFocusLost = false,
    Flag = "Input1",
    Callback = function(Text)
        local time = tonumber(Text) -- Convert the input text to a number
        if time then
            pendingLoopTime = time
        else
            print("Invalid input. Using default 1.5 seconds.")
            pendingLoopTime = 1.5
        end
    end,
})

-- Global flags for minigame states
local isMiniGameWinActive = false
local isMiniGameLoseActive = false

-- Win Account Toggle
MinigamesTab:CreateToggle({
    Name = "Win Account",
    CurrentValue = false,
    Flag = "WinAccount",
    Callback = function(Value)
        local player = game.Players.LocalPlayer

        -- Function to enter the minigame
        local function enterMinigame(vehicle)
            local args = {
                [1] = "Enter",
                [2] = vehicle
            }
            game:GetService("ReplicatedStorage"):WaitForChild("NetworkContainer"):WaitForChild("RemoteEvents"):WaitForChild("Minigames"):FireServer(unpack(args))
        end

        -- Function to leave the minigame
        local function leaveMinigame(vehicle)
            local args = {
                [1] = "Leave",
                [2] = vehicle
            }
            game:GetService("ReplicatedStorage"):WaitForChild("NetworkContainer"):WaitForChild("RemoteEvents"):WaitForChild("Minigames"):FireServer(unpack(args))
        end

        if Value then
            isMiniGameWinActive = true
            enterMinigame("2020Hiace")

            -- Detect when the character resets
            player.CharacterAdded:Connect(function()
                wait(pendingLoopTime)
                if isMiniGameWinActive then
                    enterMinigame("2020Hiace")
                end
            end)
        else
            -- Reset Character and leave the minigame
            if player.Character and player.Character:FindFirstChildOfClass("Humanoid") then
                player.Character:FindFirstChildOfClass("Humanoid").Health = 0 -- Reset the character
            end
            isMiniGameWinActive = false
            leaveMinigame("2020Hiace")
        end
    end
})

-- Lose Account Toggle
MinigamesTab:CreateToggle({
    Name = "Lose Account",
    CurrentValue = false,
    Flag = "LoseAccount",
    Callback = function(Value)
        local player = game.Players.LocalPlayer

        -- Function to enter the minigame
        local function enterMinigame(vehicle)
            local args = {
                [1] = "Enter",
                [2] = vehicle
            }
            game:GetService("ReplicatedStorage"):WaitForChild("NetworkContainer"):WaitForChild("RemoteEvents"):WaitForChild("Minigames"):FireServer(unpack(args))
            local humanoid = player.Character:WaitForChild("Humanoid")

            -- Start jumping coroutine
            coroutine.wrap(function()
                while isMiniGameLoseActive do
                    humanoid.Jump = true
                    wait(1)
                end
            end)()
        end

        -- Function to leave the minigame
        local function leaveMinigame(vehicle)
            local args = {
                [1] = "Leave",
                [2] = vehicle
            }
            game:GetService("ReplicatedStorage"):WaitForChild("NetworkContainer"):WaitForChild("RemoteEvents"):WaitForChild("Minigames"):FireServer(unpack(args))
        end

        if Value then
            isMiniGameLoseActive = true
            enterMinigame("2021Avanza15CVT")

            -- Detect when the character resets
            player.CharacterAdded:Connect(function()
                wait(pendingLoopTime)
                if isMiniGameLoseActive then
                    enterMinigame("2021Avanza15CVT")
                end
            end)
        else
            -- Reset Character and leave the minigame
            if player.Character and player.Character:FindFirstChildOfClass("Humanoid") then
                player.Character:FindFirstChildOfClass("Humanoid").Health = 0 -- Reset the character
            end
            isMiniGameLoseActive = false
            leaveMinigame("2021Avanza15CVT")
        end
    end
})

-- Ensure UI persists on character reset
local ScreenGui = Window:GetGui()
ScreenGui.ResetOnSpawn = false
