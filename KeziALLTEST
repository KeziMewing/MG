-- Anti-AFK Script
local vu = game:GetService("VirtualUser")
game:GetService("Players").LocalPlayer.Idled:Connect(function()
    vu:CaptureController()
    vu:ClickButton2(Vector2.new())
end)

-- Rayfield Library Load
local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

-- Function to show the notification every 90 seconds
local function notifyLoop()
    while true do
        Rayfield:Notify({
            Title = "Is there any bugs?",
            Content = "Consider reporting any bugs in KeziHub Discord Server",
            Duration = 6.5,  -- Duration of the notification
            Image = 4483362458,  -- Icon ID for the notification
        })
        wait(90)  -- Wait 90 seconds before showing the notification again
    end
end

-- Run the notification loop asynchronously
spawn(notifyLoop)

-- UI Setup
local Window = Rayfield:CreateWindow({
    Name = "KeziHub V1.0",
    LoadingTitle = "Kezi Specialist HUB",
    LoadingSubtitle = "by KezTeam",
    Theme = 'Default',
    ConfigurationSaving = {
        Enabled = false,
        FolderName = "KezHub",
        FileName = "KeziHubSettings"
    }
})

-- SCRIPTS HERE

-- Variables to track elapsed time and points collected
local elapsedTime = 0
local pointsCollected = 0
local isMiniGameWinActive = false -- Define the mini-game status variables
local isMiniGameLoseActive = false

-- Tab for Monitoring
local MonitoringTab = Window:CreateTab("Monitoring", 4483362458) -- Title and icon

-- Section for Monitoring Information
MonitoringTab:CreateSection("Minigame Monitoring")

-- Create Labels to show the stats in the UI
local elapsedTimeLabel = MonitoringTab:CreateLabel("Elapsed Time: 00:00:00")
local pointsCollectedLabel = MonitoringTab:CreateLabel("Points Collected: 0")

-- Update the elapsed time and points collected every second
game:GetService("RunService").Heartbeat:Connect(function()
    if isMiniGameWinActive or isMiniGameLoseActive then
        elapsedTime = elapsedTime + game:GetService("RunService").Heartbeat:Wait() -- Increment elapsed time
        
        -- Calculate elapsed time in hh:mm:ss format
        local hours = math.floor(elapsedTime / 3600)
        local minutes = math.floor((elapsedTime % 3600) / 60)
        local seconds = math.floor(elapsedTime % 60)
        
        -- Format elapsed time
        local formattedTime = string.format("%02d:%02d:%02d", hours, minutes, seconds)
        elapsedTimeLabel.Text = "Elapsed Time: " .. formattedTime

        -- Update points collected based on current active state
        if isMiniGameWinActive then
            pointsCollected = pointsCollected + (game.Players.LocalPlayer.Character and 10 or 0) -- Add 10 points for Win Account
        elseif isMiniGameLoseActive then
            pointsCollected = pointsCollected + (game.Players.LocalPlayer.Character and 5 or 0) -- Add 5 points for Lose Account
        end
        
        pointsCollectedLabel.Text = "Points Collected: " .. pointsCollected
    end
end)

-- Function to handle character reset and update points
local function onCharacterReset()
    if isMiniGameWinActive then
        pointsCollected = pointsCollected + 10
    elseif isMiniGameLoseActive then
        pointsCollected = pointsCollected + 5
    end
    pointsCollectedLabel.Text = "Points Collected: " .. pointsCollected -- Update points display
end

-- Connect character reset event to update points
game.Players.LocalPlayer.CharacterAdded:Connect(onCharacterReset)

-- Tab for Auto Farm
local AutofarmTab = Window:CreateTab("Auto Farm", 4483362458) -- Title and icon

local selectedJob = "Truck" -- Default selected job
local teleportTime = 40 -- Initialize teleport time variable
local teleportptshadTime = 5 -- Initialize Teleport PT SHAD Time variable

-- Dropdown for job selection
local Dropdown = AutofarmTab:CreateDropdown({
    Name = "Select Job",
    Options = {"Truck"}, -- Add more options if needed
    CurrentOption = {"Truck"},
    MultipleOptions = false,
    Flag = "Dropdown1",
    Callback = function(Options)
        if #Options > 0 then
            selectedJob = Options[1] -- Update selected job based on dropdown selection
        end
    end,
})

-- Input for teleport time
local Input = AutofarmTab:CreateInput({
    Name = "Teleport Time",
    CurrentValue = tostring(teleportTime),
    PlaceholderText = "Teleport Time (in seconds)",
    RemoveTextAfterFocusLost = false,
    Flag = "Input1",
    Callback = function(Text)
        local value = tonumber(Text)
        if value and value > 0 then
            teleportTime = value -- Update teleport time based on input
        else
            warn("Invalid teleport time entered. Please enter a number greater than 0.")
            teleportTime = 40 -- Reset to default if invalid
        end
    end,
})

-- Input for teleport to pt shad time
local Input2 = AutofarmTab:CreateInput({
    Name = "Teleport To PT SHAD Time",
    CurrentValue = tostring(teleportptshadTime),
    PlaceholderText = "Teleport To PT SHAD Time (in seconds)",
    RemoveTextAfterFocusLost = false,
    Flag = "Input2",
    Callback = function(Text)
        local value = tonumber(Text)
        if value and value > 0 then
            teleportptshadTime = value -- Update teleport pt shad time based on input
        else
            warn("Invalid PT SHAD time entered. Please enter a number greater than 0.")
            teleportptshadTime = 5 -- Reset to default if invalid
        end
    end,
})

-- Create Truck AutoFarm Function
local function StartAutoFarmTruck()
    coroutine.wrap(function()
        local player = game.Players.LocalPlayer

        -- Fire server event to start the job
        local args = { [1] = selectedJob } -- Use selectedJob directly
        game:GetService("ReplicatedStorage"):WaitForChild("NetworkContainer"):WaitForChild("RemoteEvents"):WaitForChild("Job"):FireServer(unpack(args))

        local isTeleportToPTShad = false -- Initialize teleport flag
        local startJob = false -- Initialize job start flag

        -- Function to fly the player to the specified waypoint and hold for a duration
        local function flyToWaypoint(flyDuration, holdDuration)
            local character = player.Character or player.CharacterAdded:Wait()
            local humanoidRootPart = character:FindFirstChild("HumanoidRootPart")
            local waypoint = workspace:WaitForChild("Etc"):WaitForChild("Waypoint"):WaitForChild("Waypoint")

            if humanoidRootPart and waypoint then
                local startCFrame, endCFrame = humanoidRootPart.CFrame, waypoint.CFrame
                local startTime = tick()

                -- Fly to the waypoint
                while tick() - startTime < flyDuration do
                    humanoidRootPart.CFrame = startCFrame:Lerp(endCFrame, (tick() - startTime) / flyDuration)
                    wait(0.03)
                end
                
                humanoidRootPart.CFrame = endCFrame -- Ensure exact arrival
                wait(holdDuration) -- Hold at waypoint
            else
                warn("Character or waypoint not found.")
            end
        end

        -- Start Job
        local prompt = workspace.Etc.Job.Truck.Starter:WaitForChild("Prompt") -- Get the ProximityPrompt

        -- Function to fire the Proximity Prompt
        local function fireProximityPrompt()
            if prompt and prompt:IsA("ProximityPrompt") then
                -- Fire the Proximity Prompt if teleport flag is set
                if isTeleportToPTShad then
                    startJob = true
                    prompt:InputHoldBegin() -- Simulate the user interaction
                    wait(0.1) -- Simulate hold time
                    prompt:InputHoldEnd() -- End the interaction
                    print("Proximity prompt fired for: " .. prompt.Name)
                end
            else
                warn("Provided object is not a valid ProximityPrompt.")
            end
        end
        
        -- Call the function to fire the Proximity Prompt
        fireProximityPrompt()

        -- Fly to designated truck coordinates
        local function flyToCoordinates(targetPosition, duration)
            local character = player.Character or player.CharacterAdded:Wait()
            local humanoidRootPart = character:FindFirstChild("HumanoidRootPart")
        
            if humanoidRootPart then
                if startJob then -- Ensure the job has started before flying
                    local startCFrame = humanoidRootPart.CFrame -- Get the current position and orientation
                    local endCFrame = CFrame.new(targetPosition) -- Create CFrame with the target position
            
                    local startTime = tick() -- Record the start time
            
                    -- Move to the target position over the specified duration
                    while tick() - startTime < duration do
                        local alpha = (tick() - startTime) / duration -- Calculate the interpolation factor
                        humanoidRootPart.CFrame = startCFrame:Lerp(endCFrame, alpha) -- Interpolate between the start and end CFrames
                        wait(0.03) -- Wait briefly for smooth movement
                    end
            
                    humanoidRootPart.CFrame = endCFrame -- Set the character's position to the end CFrame
                end
            else
                warn("HumanoidRootPart not found.")
            end
        end

        -- Main AutoFarm Loop
        while true do
            wait(teleportTime) -- Wait before teleporting
            isTeleportToPTShad = true -- Enable teleport flag
            flyToWaypoint(teleportTime, teleportptshadTime) -- Fly to the waypoint
            flyToCoordinates(Vector3.new(0, 0, 0), teleportTime) -- Move to the desired coordinates (replace with actual coords)
        end
    end)() -- End of coroutine
end

-- Start Button for AutoFarm
AutofarmTab:CreateButton({
    Name = "Start AutoFarm (Truck)",
    Callback = function()
        StartAutoFarmTruck() -- Start the truck auto-farm when the button is clicked
    end,
})

-- Create toggle button for stopping the auto farm
local toggleAutoFarm = false

-- Create Button for Stopping AutoFarm
AutofarmTab:CreateButton({
    Name = "Stop AutoFarm",
    Callback = function()
        toggleAutoFarm = false -- Set the toggle to false to stop auto-farming
        print("AutoFarm stopped.") -- Log when auto-farm is stopped
    end,
})

-- Finally, show the window
Rayfield:Show()

-- Ensure UI persists on character reset
local ScreenGui = Window:GetGui()
ScreenGui.ResetOnSpawn = false
